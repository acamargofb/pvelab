%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%------- Setup file (*.ini) for The pipeline program ------
%   NAME: setupPVELab.ini
%   SYNTAX: Matlab m-file
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   EXECUTION:  0) (Done once) Ensure that The pipeline program exist in Matlab search path.
%               1) Start Matlab version 7.7 or later
%               2) > setupPipeline('setupPVELab.ini');
%   DESCRIPTION:
%
%
%
% A description of the fields in the setup structure is given in the following
% (the setup structure can be copied and used):
%
% %%%%%%% NOTE: ONLY GIVEN SETUP FIELDS ARE ACCEPTED BY THE PIPELINE PROGRAM %%%%%%%
%__________________________________________________________________________________________________________________
%   tmpTask=[]                                          %(Matlab code) Resets the temporary data structure.
%
%   TaskIndex=                                          %(numeric) Order of current task in the pipeline: 
%                                                           1 is the first task and placed left.
%   MethodIndex=                                        %(numeric) Order of current methods in current task:
%                                                           1 is first and placed highst in the popup menu.
%   tmpTask.task=                                       %(string) Name of task to appear in the pipeline.
%   tmpTask.method=                                     %(string) Name of method in short terme to appear in popup menu.
%   tmpTask.method_name=                                %(string)(OPTIONAL) Full name of method to appear as hint 
%                                                           in the user-interface.
%   tmpTask.function_name=                              %(string) (OPTIONAL) Name of function (*.m, *.exe or alike) 
%                                                           realising the method.
%   tmpTask.description=                                %(string) Short description for the method will appear in 
%                                                           the information frame, when methos is selected.
%   tmpTask.require_os=					%(numeric) =0 indicates no OS-requirements. =1 or =2
%							    respectively indicates Unix or Windows as the required OS.
%   tmpTask.require_taskindex{task#}=               	%(numeric) Required methods to run before this method. 
%							    =[] no requirements to task-task#. (you only have to set this value 
%							        for one of the tasks)
%							    =0 requires task-task# to be completed with any method.
%							    =[1,2,x,...] requires method 1,2 or x in task-task# to be completed.
%   tmpTask.function_wrapper=                           %(string) Name of function wrapper used to interface the pipeline
%                                                           program and method.
%   tmpTask.prefix=                                     %(string) Prefix given to ouputfiles if empty no change==no outputfile.
%   tmpTask.documentation=                              %(string) Where to find documentation of current method, will appear
%                                                           in 'help' menu.
%   tmpTask.who_did=                                    %(string) Who did the programming/development of current method, will 
%                                                           appear in 'help' menu.
%   tmpTask.configurator_wrapper=                       %(string)(OPTINAL) If a configurator is available this function interface
%                                                           between the pipeline program and the configurator.
%   tmpTask.configurator.default=                       %(string/numeric/datastructure)(OPTIONAL) Default settings of method.
%   tmpTask.configurator.user=                          %(string/numeric/datastructure) (OPTIONAL) User selected settings of method.
%   tmpTask.configurator.configurator_name=             %(string) (OPTIONAL) Configurator function (*.m,*.exe or alike)
%                                                           called by the configurator_wrapper.
%   tmpTask.versionlabel=                               %(string) Textstring of used SW version number found in the functions. 
%                                                           Is used to track settings of a pipleine.
%
%
%   pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;  %(Matlab code) Update settings above in the data structure
%                                                           of the project 'project.pipeline.taskSetup{TaskIndex,MethodIndex}.
%___________________________________________________________________________________________________________________
%___________________________________________________________________________________________________________________
%SW version: 260303TD, T. Dyrby, 120303, NRU
%SW version: 151211TD, C. Svarer, 151111, NRU
%SW version: 20120711CS, C. Svarer, 110712, NRU


%__________ Image information
pipeline.imageModality=[]; %number of loaded modalities are set in fileload_wrapper
%Name and order of imageModality should be {'PET','T1-W','T2-W','PD-W'} in fileload wrapper
pipeline.imageIndex=1; %(FOR FUTURE USE) Number of loaded different images

%Setup default methods in pipeline
pipeline.defaultPipeline(1)=1;
pipeline.defaultPipeline(2)=3;
pipeline.defaultPipeline(3)=2;
pipeline.defaultPipeline(4)=3;
pipeline.defaultPipeline(5)=2;
pipeline.defaultPipeline(6)=1;
pipeline.defaultPipeline(7)=1;

%__________ Project Information 
pipeline_ProjectTitleName='PVELab';%(OPTIONAL) Title to appear in The Pipeline Program, if not given setup filename is used

pipeline_ProjectPrefix='pve';%(OPTIONAL) Prefix added to project files/directories to distinguish between used pipelines


%-------------------------------------------------------------------------------------------------------------
%---------------- Setup the pipeline: project.pipeline.taskSetup{TaskIndex,MethodIndex} ----------------------
%-------------------------------------------------------------------------------------------------------------
%_____________________________________________________________________________________
%______________setup FIRST TASK: FILE LOAD____________________________________________
tmpTask=[];

TaskIndex=1;% FileLoad
MethodIndex=1;% FileLoad
tmpTask.task='FileLoad';

tmpTask.method='Load 1 PET + 1 MR';
tmpTask.method_name='FileLoad1MR_wrapper';
tmpTask.function_name='FileLoad1MR_wrapper';
tmpTask.description='Loads image files in Analyze 7 format or some DICOM formats (which are converted to Analyze 7 format).';
tmpTask.require_os=0; %No specific OS required
tmpTask.require_taskindex{1}=[]; %[]=no methods has to be done in task one (or in the other tasks which are automatically set=[])
tmpTask.function_wrapper='FileLoad1MR_wrapper';
tmpTask.prefix='';
tmpTask.documentation='file:/Load1PETand1MR.html';
tmpTask.who_did='NRU, 2003';
tmpTask.configurator_wrapper='';
tmpTask.configurator.default='';
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version:';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;

%____________________________________________________________________________________
tmpTask=[];

TaskIndex=1;% FileLoad
MethodIndex=2;% FileLoad
tmpTask.task='FileLoad';

tmpTask.method='Loads 1 PET + 3 MR';
tmpTask.method_name='FileLoad3MR_wrapper';
tmpTask.function_name='FileLoad3MR_wrapper';
tmpTask.description='Loads image files in Analyze 7 format or some DICOM formats (which are converted to Analyze 7 format).';
tmpTask.require_os=0; %No specific OS required
tmpTask.require_taskindex{1}=[]; %[]=no methods has to be done in task one (or in the other tasks which are automatically set=[])
tmpTask.function_wrapper='FileLoad3MR_wrapper';
tmpTask.prefix='';
tmpTask.documentation='None available';
tmpTask.who_did='NRU, 2003';
tmpTask.configurator_wrapper='';
tmpTask.configurator.default='';
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;

%_____________________________________________________________________________________
%______________setup TASK: Registration_______________________________________________
tmpTask=[];

TaskIndex=2;% Registration
MethodIndex=1;% IIO
tmpTask.task='Registration';

tmpTask.method='IIO';
tmpTask.method_name='Interactive Image Overlay';
tmpTask.function_name='Coreg';
tmpTask.description='Manual coregistration by using image overlay. Close window to exit when images are aligned. Method generates an AIR-file. IIO = Interactive Image Overlay.';
tmpTask.require_os=0; %No specific OS required
tmpTask.require_taskindex{1}=0; %Task one has to be completed (other tasks=[])
tmpTask.function_wrapper='registrate_wrapper';
tmpTask.prefix='';
tmpTask.documentation='file:/iio/iio.html';
tmpTask.who_did='NRU, 2003';
tmpTask.configurator_wrapper='';
tmpTask.configurator.default='Batch';
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;


%_____________________________________________________________________________________
tmpTask=[];

TaskIndex=2;% Registration
MethodIndex=2;% IPS
tmpTask.task='Registration';

tmpTask.method='IPS';
tmpTask.method_name='Interactive Point Selection';
tmpTask.function_name='Registrate';
tmpTask.description='Coregistration is performed using user selected points (min. 3). Close window to exit when points have been selected. Remember to push the red "Est. Error" button before exit.  Method generates an AIR-file. IPS = Interactive Point Selection.';
tmpTask.require_os=0; %No specific OS required
tmpTask.require_taskindex{1}=0; %Task one has to be completed (other tasks=[])
tmpTask.function_wrapper='registrate_wrapper';
tmpTask.prefix='';
tmpTask.documentation='file:/ips/ips.html';
tmpTask.who_did='NRU, 2003';
tmpTask.configurator_wrapper='';
tmpTask.configurator.default='Batch';
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;


%____________________________________________________________________________________
tmpTask=[];

TaskIndex=2;% Coregistration
MethodIndex=3;% SPM2 Coreg routine
tmpTask.task='Coregistration';

tmpTask.method='SPM coregistration';
tmpTask.method_name='SPM coregistration';
tmpTask.function_name='SpmCoreg_wrapper';
tmpTask.function_wrapper='SpmCoreg_wrapper';
tmpTask.description='This method uses the SPM-coregistration routine to coregister the loaded images. This method generates an AIR-file. Make sure origin is set correctly or to zero in inputfiles. Not compatible with 32bit images. SPM (Statistical Parametric Mapping) http://www.fil.ion.ucl.ac.uk/spm';
tmpTask.require_os=0; %No specific OS required
tmpTask.require_taskindex{1}=0; %Task one, has to be completed (other tasks=[])
tmpTask.documentation='http://www.fil.ion.ucl.ac.uk/spm/spm2.html';
tmpTask.prefix='';
tmpTask.who_did='SPM-team';
tmpTask.configurator_wrapper='SpmCoregConfig_wrapper';
tmpTask.configurator.default='';
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;


%_____________________________________________________________________________________
tmpTask=[];

TaskIndex=2;% Registration
MethodIndex=4;% AIR coregistration
tmpTask.task='Registration';

tmpTask.method='AIR';
tmpTask.method_name='AIR coregistration method';
tmpTask.function_name='Align';
tmpTask.description='Automatic Image Registration by Roger Woods, ver 5.2.5.';
tmpTask.require_os=0; %Unix OS required
tmpTask.require_taskindex{1}=0; %task one has to be done
tmpTask.function_wrapper='registrate_wrapper';
tmpTask.prefix='';
tmpTask.documentation='http://air.bmap.ucla.edu:16080/AIR5/alignlinear.html';
tmpTask.who_did='Roger woods';
tmpTask.configurator_wrapper='';
tmpTask.configurator.default='init';
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;



%___________________________________________________________________________________________________
tmpTask=[];

TaskIndex=2;% Registration
MethodIndex=5;% loadAir
tmpTask.task='Registration';

tmpTask.method='Load AIR-file';
tmpTask.method_name='Load existing AIR-file';
tmpTask.function_name='loadAir_wrapper';
tmpTask.description='Load existing AIR-file into project.';
tmpTask.require_os=0; %No specific OS required
tmpTask.require_taskindex{1}=0; %Task one has to be completed (other tasks=[])
tmpTask.function_wrapper='loadAir_wrapper';
tmpTask.prefix='';
tmpTask.documentation='file:/LoadAIR/LoadAIR.html';
tmpTask.who_did='NRU, 2004';
tmpTask.configurator_wrapper='';
tmpTask.configurator.default='';
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;

%___________________________________________________________________________________________________
tmpTask=[];

TaskIndex=2;% Registration
MethodIndex=6;% Already aligned
tmpTask.task='Registration';

tmpTask.method='Already aligned';
tmpTask.method_name='Already aligned, create AIR file';
tmpTask.function_name='AlreadyAligned_wrapper';
tmpTask.description='Creates an AIR file corresponding to the already aligned PET and MR volume.';
tmpTask.require_os=0; %No specific OS required
tmpTask.require_taskindex{1}=0; %Task one has to be completed (other tasks=[])
tmpTask.function_wrapper='AlreadyAligned_wrapper';
tmpTask.prefix='';
tmpTask.documentation='';
tmpTask.who_did='NRU, 2012';
tmpTask.configurator_wrapper='';
tmpTask.configurator.default='';
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;


%____________________________________________________________________________________
%______________setup TASK: Segmentation_______________________________________________
tmpTask=[];

TaskIndex=3;% Segmentation
MethodIndex=1;% Segmentation
tmpTask.task='Segmentation';

tmpTask.method='QMCI based';
tmpTask.method_name='Segmentation';
tmpTask.function_name='Segmentation';
tmpTask.description='Automatic segmentation method based on QMCI by IBB - CNR, Italy. Needs 3 MRI inputfiles (use special fileload-method): T1-weighted, T2-weighted and Proton Density weighted.';
tmpTask.require_os=0; 
tmpTask.require_taskindex{1}=[2]; %Task one - method two, has to be completed
tmpTask.require_taskindex{2}=0; %Task two has to be completed
tmpTask.function_wrapper='Seg_wrapper';
tmpTask.prefix='';
tmpTask.documentation='';
tmpTask.who_did='IBB, CNR, IT, 2003';
tmpTask.configurator_wrapper='CONFIG_Seg';
tmpTask.configurator.default={'320.0','Y','Y','N','1.0'};
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version:';


pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;

%____________________________________________________________________________________
tmpTask=[];
TaskIndex=3;% Segmentation
MethodIndex=2;% SPM2 segmentation routine
tmpTask.task='Segmentation';

tmpTask.method='SPM segmentation';
tmpTask.method_name='SPM segmentation';
tmpTask.function_name='SpmSeg_wrapper';
tmpTask.function_wrapper='SpmSeg_wrapper';
tmpTask.description='This method uses the SPM2-segmentation routine to segment the loaded MR-images. If segmenting multiple modalities, these have to be in register (same position, size, voxel dims etc..) before segmentation. Make sure origin is set correctly or to zero. Not compatible with 32bit images. SPM (Statistical Parametric Mapping) http://www.fil.ion.ucl.ac.uk/spm. ';
tmpTask.require_os=0; %No specific OS required
tmpTask.require_taskindex{1}=0; %Task one has to be completed (other tasks=[])
tmpTask.documentation='http://www.fil.ion.ucl.ac.uk/spm/spm2.html';
tmpTask.prefix=''; %prefix is added to 'outputfiles' 
tmpTask.who_did='SPM-team';
tmpTask.configurator_wrapper='SpmSegConfig_wrapper';
tmpTask.configurator.default='';
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version:';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;


%____________________________________________________________________________________
tmpTask=[];
TaskIndex=3;% Segmentation
MethodIndex=3;% Canterbury segmentation (BrainSeg1)
tmpTask.task='Segmentation';

tmpTask.method='BrainSeg1';
tmpTask.method_name='BrainSeg1';
tmpTask.function_name='BrainSeg1_wrapper';
tmpTask.description='BrainSeg1 segmentation routine from Canterbury. Input is one MRI, output MRI is split to three. Only compiled for unix.';
tmpTask.require_os=1; %Unix OS required
tmpTask.require_taskindex{1}=0; %Task one has to be completed (other tasks=[])
tmpTask.function_wrapper='BrainSeg1_wrapper';
tmpTask.prefix='';
tmpTask.documentation='None available';
tmpTask.who_did='Canterbury, 2003';
tmpTask.configurator_wrapper='';
tmpTask.configurator.default='';
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;

%____________________________________________________________________________________
tmpTask=[];
TaskIndex=3; % Segmentation
MethodIndex=4;% 
tmpTask.task='Segmentation';

tmpTask.method='Load Segmentation';
tmpTask.method_name='Load existing segmentation.';
tmpTask.function_name='loadSeg_nogui';
tmpTask.description='Load existing segmentation files derived from the loaded MRI (gray matter, white matter and CSF+surroundings). The voxel values in these three images should be the probability for each voxel being of the class covered by the image it is in (see how SPM2 does it). Origin, voxel-size and dimension has to be the same as for the loaded MRI.';
tmpTask.require_os=0; %Unix OS required
tmpTask.require_taskindex{1}=0; %Task one has to be completed (other tasks=[])
tmpTask.function_wrapper='loadSeg_nogui';
tmpTask.prefix='';
tmpTask.documentation='None available';
tmpTask.who_did='NRU, 2004';
tmpTask.configurator_wrapper='';
tmpTask.configurator.default='';
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;


%_____________________________________________________________________________________
%______________setup TASK: Reslicing__________________________________________________
tmpTask=[];

TaskIndex=4;% Reslicing
MethodIndex=1; % MRiWarp
tmpTask.task='Reslicing';

tmpTask.method='ResliceWarp';
tmpTask.method_name='MRiWarp';
tmpTask.function_name='ResliceWarp';
tmpTask.description='Reslicing of scans with WARP-method. Inputfile requirements: 16bit-signed (input is converted automatically) and zero origin.';
tmpTask.require_os=1; %Unix OS required
tmpTask.require_taskindex{2}=0; %Task two has to be completed (other tasks=[])
tmpTask.function_wrapper='Reslice_wrapper';
tmpTask.prefix='r';
tmpTask.documentation='http://hendrix.imm.dtu.dk/software/mriwarp/mriwarp.html';
tmpTask.who_did='Ulrik Kjems, 2001';

tmpTask.configurator_wrapper='ResliceConfig_wrapper';
tmpTask.configurator.default='';
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version';
pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;


%___________________________________________________________________________________
tmpTask=[];

TaskIndex=4;% Reslicing
MethodIndex=2; % reslice AIR5.0
tmpTask.task='Reslicing';

tmpTask.method='ResliceAIR';
tmpTask.method_name='Reslice AIR';
tmpTask.function_name='ResliceAir';
tmpTask.description='Reslicing of scans with Roger Woods AIR-method. Inputfile requirements: 16bit-signed (input is converted automatically).';
tmpTask.require_os=1; %Unix OS required
tmpTask.require_taskindex{2}=0; %Task two has to be completed (other tasks=[])
tmpTask.function_wrapper='Reslice_wrapper';
tmpTask.prefix='r';
tmpTask.documentation='http://air.bmap.ucla.edu:16080/AIR5/reslice.html';
tmpTask.who_did='Roger Woods, 2002';
tmpTask.configurator_wrapper='ResliceConfig_wrapper';

tmpTask.configurator_wrapper='ResliceConfig_wrapper';
tmpTask.configurator.default='';
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;


%__________________________________________________________________________________
tmpTask=[];

TaskIndex=4;% Reslicing
MethodIndex=3; % reslice (Matlab)
tmpTask.task='Reslicing';

tmpTask.method='Reslice';
tmpTask.method_name='Reslice';
tmpTask.function_name='Reslice';
tmpTask.description='Reslicing of scans using interp3 (Matlab). Uses a lot of memory... Inputfile requirements: None. ';
tmpTask.require_os=0; %No specific OS required
tmpTask.require_taskindex{2}=0; %Task one has to be completed (other tasks=[])
tmpTask.function_wrapper='Reslice_wrapper';
tmpTask.prefix='r';
tmpTask.documentation='http://bishopw.loni.ucla.edu/AIR3/reslice_warp.html';
tmpTask.who_did='Peter Willendrup, NRU, 2001';

tmpTask.configurator_wrapper='ResliceConfig_wrapper';
tmpTask.configurator.default='';
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;

%____________________________________________________________________________________
tmpTask=[];
TaskIndex=4; % Reslicing
MethodIndex=4;% 
tmpTask.task='Reslicing';

tmpTask.method='Load segmented MR';
tmpTask.method_name='Load existing segmentation, coregistered to the PET.';
tmpTask.function_name='loadRSeg_wrapper';
tmpTask.description='Load existing segmentation files derived from the loaded MRI (gray matter, white matter and CSF+surroundings). The voxel values in these three images should be the probability for each voxel being of the class covered by the image it is in (see how SPM2 does it). Origin, voxel-size and dimension has to be the same as for the loaded PET, e.g. the images must be coregistered to the PET.';
tmpTask.require_os=0; %Unix OS required
tmpTask.require_taskindex{1}=0; %Task one has to be completed (other tasks=[])
tmpTask.function_wrapper='loadRSeg_wrapper';
tmpTask.prefix='';
tmpTask.documentation='None available';
tmpTask.who_did='NRU, 2004';
tmpTask.configurator_wrapper='';
tmpTask.configurator.default='';
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;


%____________________________________________________________________________________
tmpTask=[];
TaskIndex=4; % Reslicing
MethodIndex=5;% 
tmpTask.task='Reslicing';

tmpTask.method='Load resliced PET';
tmpTask.method_name='Load existing PET, coregistered to the segmentation.';
tmpTask.function_name='loadRPET_wrapper';
tmpTask.description='Load existing PET file. Origin, voxel-size and dimension has to be the same as for the loaded segmented, e.g. the image must be coregistered to the segmentation.';
tmpTask.require_os=0; %Unix OS required
tmpTask.require_taskindex{1}=0; %Task one has to be completed (other tasks=[])
tmpTask.require_taskindex{3}=0; %Task three has to be completed (other tasks=[])
tmpTask.function_wrapper='loadRPET_wrapper';
tmpTask.prefix='';
tmpTask.documentation='None available';
tmpTask.who_did='NRU, 2004';
tmpTask.configurator_wrapper='';
tmpTask.configurator.default='';
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;


%____________________________________________________________________________________
tmpTask=[];
TaskIndex=4; % Reslicing
MethodIndex=6;% 
tmpTask.task='Reslicing';

tmpTask.method='Load all';
tmpTask.method_name='Load existing PET and segmentation, coregistered.';
tmpTask.function_name='loadAll_wrapper';
tmpTask.description='Load existing PET and segmented filse. Origin, voxel-size and dimension has to be the same, e.g. the images must be coregistered.';
tmpTask.require_os=0; %Unix OS required
tmpTask.require_taskindex{1}=[];
tmpTask.function_wrapper='loadAll_wrapper';
tmpTask.prefix='';
tmpTask.documentation='None available';
tmpTask.who_did='NRU, 2004';
tmpTask.configurator_wrapper='';
tmpTask.configurator.default='';
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;


%_____________________________________________________________________________________
%______________setup TASK: Atlas______________________________________________________
tmpTask=[];

TaskIndex=5;% Atlas
MethodIndex=1; % Atlas
tmpTask.task='Atlas';

tmpTask.method='Talairach based';
tmpTask.method_name='Atlas';
tmpTask.function_name='Atlas';
tmpTask.description='Talairach based atlas labeling to improve PVE correction, by IBB - CNR, Italy. Label Left/Right notation is by the radiological convention (left is right for the person owning the brain).';
tmpTask.require_os=0; %Unix OS required
tmpTask.require_taskindex{4}=0; %Task four has to be completed (other tasks=[])
tmpTask.function_wrapper='Atlas_wrapper';
tmpTask.prefix='';
tmpTask.documentation='';
tmpTask.who_did='IBB, CNR, IT, 2003';
tmpTask.configurator_wrapper='CONFIG_Atlas';
tmpTask.configurator.default={'ClassifyTalair.Mat','N','10','LOBES_ROI.dat','Y'};
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version: ';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;


%______________________________________________________________________________________
tmpTask=[];

TaskIndex=5;% Atlas
MethodIndex=2; % Atlas
tmpTask.task='Atlas';

tmpTask.method='MNI based';
tmpTask.method_name='Atlas2';
tmpTask.function_name='Atlas2_wrapper';
tmpTask.description='MNI based atlas labeling to improve PVE correction, by IBB - CNR, Italy. Label Left/Right notation is by the radiological convention (left is right for the person owning the brain).';
tmpTask.require_os=0; 
%tmpTask.require_taskindex{1}=[2]; %We need 3 MR-files ----------------------- NO. Only T1-W and the tree segmented!
tmpTask.require_taskindex{4}=0; %Task four has to be completed (other tasks=[])
tmpTask.function_wrapper='Atlas2_wrapper';
tmpTask.prefix='';
tmpTask.documentation='';
tmpTask.who_did='IBB, CNR, IT, 2003';
tmpTask.configurator_wrapper='CONFIG_Atlas2';
tmpTask.configurator.default={'Y'};
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version: ';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;

%______________________________________________________________________________________
tmpTask=[];

TaskIndex=5;% Atlas
MethodIndex=3; % Atlas
tmpTask.task='Atlas';

tmpTask.method='ApplyRois';
tmpTask.method_name='ApplyRois';
tmpTask.function_name='applyRois_wrapper';
tmpTask.description='ApplyRois method. Label Left/Right notation is by the neurological convention (right is right for the person owning the brain). This method uses the WARP-package which has to be downloaded seperately. This package can only handle 16bit signed files, which is therefore a requirement for applyrois. Applyrois is developed by Claus Svarer - NRU.';
tmpTask.require_os=0; % Can alos run in Windows now
tmpTask.require_taskindex{2}=0; %Any reslice method is ok
tmpTask.require_taskindex{3}=[1 2 4]; %SPM-like segmented images required
tmpTask.function_wrapper='applyRois_wrapper';
tmpTask.prefix='';
tmpTask.documentation='file:/applyrois/applyrois.html';
tmpTask.who_did='Claus Svarer - NRU 2003';
tmpTask.configurator_wrapper='configApplyrois_wrapper';
tmpTask.configurator.default='';
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='configApplyrois_wrapper';
tmpTask.versionlabel='By';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;

%______________________________________________________________________________________
tmpTask=[];

TaskIndex=5;% Atlas
MethodIndex=4; % Load GMROI file
tmpTask.task='Atlas';

tmpTask.method='Load all';
tmpTask.method_name='LoadGMROI';
tmpTask.function_name='loadGMROI_nogui';
tmpTask.description='Load external GMROI (labeled brain) and PET files, by IBB - CNR, Italy. Label Left/Right notation is by the radiological convention (left is right for the person owning the brain).';
tmpTask.require_os=0; %Unix OS required
tmpTask.require_taskindex{1}=[];
tmpTask.function_wrapper='loadGMROI_nogui';
tmpTask.prefix='';
tmpTask.documentation='';
tmpTask.who_did='IBB, CNR, IT, 2004';
tmpTask.configurator_wrapper='';
tmpTask.configurator.default='';
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version: ';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;


%______________________________________________________________________________________
tmpTask=[];

TaskIndex=5;% Atlas
MethodIndex=5; % One ROI
tmpTask.task='Atlas';

tmpTask.method='Skip Atlas';
tmpTask.method_name='ONE ROI';
tmpTask.function_name='oneROI_wrapper';
tmpTask.description='Use one ROI for the GM, one for the WM and one for the CSF, by IBB - CNR, Italy. Label Left/Right notation is by the radiological convention (left is right for the person owning the brain).';
tmpTask.require_os=0;
tmpTask.require_taskindex{1}=[];
tmpTask.function_wrapper='oneROI_wrapper';
tmpTask.prefix='';
tmpTask.documentation='';
tmpTask.who_did='IBB, CNR, IT, 2004';
tmpTask.configurator_wrapper='';
tmpTask.configurator.default='';
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version: ';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;


%_____________________________________________________________________________________
%______________setup TASK: PVE Correction_____________________________________________
tmpTask=[];

TaskIndex=6;% PVEcorrection
MethodIndex=1;% PVE correction
tmpTask.task='PVE correction';

tmpTask.method='PVE correction';
tmpTask.method_name='PVE correction';
tmpTask.function_name='PVEc';
tmpTask.description='Automatic methods to do a PVE correction, by IBB - CNR, Italy';
tmpTask.require_os=0;
tmpTask.require_taskindex{5}=0; %Task four has to be completed (other tasks=[])
tmpTask.function_wrapper='PVE_nogui';
tmpTask.prefix='';
tmpTask.documentation='';
tmpTask.who_did='IBB, CNR, IT, 2003';
tmpTask.configurator_wrapper='CONFIG_PVEC';
fl=0;
fl=bitset(fl,1);   % PVE Rousset
fl=bitset(fl,2);   % PVE Meltzer
fl=bitset(fl,3);   % PVE MG
fl=bitset(fl,4);   % PVE Alfano (PVEout)
fl=bitset(fl,5);   % Unknown
fl=bitset(fl,6);   % WM CS (Semi ovali)
fl=bitset(fl,7);   % WM Rousset
fl=bitset(fl,8);   % WM Alfano (linear method)
tmpTask.configurator.default={'LOBES_ROI.dat','Y','8.0','8.0','0.0','Y',fl};
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;


%______________________________________________________________________________________
tmpTask=[];

TaskIndex=7;% Extract
MethodIndex=1; % Extract
tmpTask.task='Extract data';

tmpTask.method='Extract data';
tmpTask.method_name='Extract data';
tmpTask.function_name='extract_nogui';
tmpTask.description='Extract data method. Data are extracted especially information about volumes in ROIs';
tmpTask.require_os=0; % Can alos run in Windows now
tmpTask.require_taskindex{6}=1;
tmpTask.function_wrapper='extract_nogui';
tmpTask.prefix='';
tmpTask.documentation='';
tmpTask.who_did='Claus Svarer - NRU 2007';
tmpTask.configurator_wrapper='';
tmpTask.configurator.default='';
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='v1.1';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;


%______________________________________________________________________________________
tmpTask=[];

TaskIndex=8;% 'Others'
MethodIndex=1;% Tool
tmpTask.task='Others';

tmpTask.method='RCV';
tmpTask.method_name='RCV_wrapper';
tmpTask.function_name='RCV_wrapper';
tmpTask.description='Tool to handle DICOM files';
tmpTask.require_os=0; 
tmpTask.require_taskindex{1}=[]; %no tasks has to be completed (other tasks=[])
tmpTask.function_wrapper='RCV_wrapper';
tmpTask.prefix='';
tmpTask.documentation='????';
tmpTask.who_did='IBB, CNR, IT, 2003';
tmpTask.configurator_wrapper='';
tmpTask.configurator.default='';
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version:';


pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;

%______________________________________________________________________________________
tmpTask=[];

TaskIndex=8;% 'Others'
MethodIndex=2;% Tool
tmpTask.task='Others';

tmpTask.method='ROI Edit';
tmpTask.method_name='ROIEdit_wrapper';
tmpTask.function_name='ROIEdit_wrapper';
tmpTask.description='Tool to edit ROIs';
tmpTask.require_os=0; %No specific OS required
tmpTask.require_taskindex{1}=[]; %no tasks has to be completed (other tasks=[])
tmpTask.function_wrapper='ROIEdit_wrapper';
tmpTask.prefix='';
tmpTask.documentation='';
tmpTask.who_did='IBB, CNR, IT, 2003';
tmpTask.configurator_wrapper='';
tmpTask.configurator.default='';
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version:';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;


%______________________________________________________________________________________
tmpTask=[];

TaskIndex=8;% 'Others'
MethodIndex=3;% Tool
tmpTask.task='Others';

tmpTask.method='Image Edit';
tmpTask.method_name='IMGEdit_wrapper';
tmpTask.function_name='IMGEdit_wrapper';
tmpTask.description='Tool to edit images';
tmpTask.require_os=0; %No specific OS required
tmpTask.require_taskindex{1}=[]; %no tasks has to be completed (other tasks=[])
tmpTask.function_wrapper='IMGEdit_wrapper';
tmpTask.prefix='';
tmpTask.documentation='';
tmpTask.who_did='IBB, CNR, IT, 2003';
tmpTask.configurator_wrapper='';
tmpTask.configurator.default='';
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version:';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;

%______________________________________________________________________________________
tmpTask=[];

TaskIndex=8;% 'Others'
MethodIndex=4;% Tool
tmpTask.task='Others';

tmpTask.method='Fix Analyze-header';
tmpTask.method_name='FixHdr_wrapper';
tmpTask.function_name='FixHdr_wrapper';
tmpTask.description='Tool to edit Analyze headers';
tmpTask.require_os=0; %No specific OS required
tmpTask.require_taskindex{1}=[]; %no tasks has to be completed (other tasks=[])
tmpTask.function_wrapper='FixHdr_wrapper';
tmpTask.prefix='';
tmpTask.documentation='';
tmpTask.who_did='NRU, 2003';
tmpTask.configurator_wrapper='';
tmpTask.configurator.default='';
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version:';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;

%______________________________________________________________________________________
tmpTask=[];

TaskIndex=8;% 'Others'
MethodIndex=5;% Tool
tmpTask.task='Others';

tmpTask.method='PET simulator';
tmpTask.method_name='petsim_Wrapper';
tmpTask.function_name='petsim_Wrapper';
tmpTask.description='Tool to created simulated PET images';
tmpTask.require_os=0; %No specific OS required
tmpTask.require_taskindex{1}=[]; %no tasks has to be completed (other tasks=[])
tmpTask.function_wrapper='petsim_Wrapper';
tmpTask.prefix='';
tmpTask.documentation='';
tmpTask.who_did='PET center, Debrechen, 2004';
tmpTask.configurator_wrapper='';
tmpTask.configurator.default='';
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version: 30';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;

TaskIndex=8;% 'Others'
MethodIndex=6;% Tool
tmpTask.task='Others';

tmpTask.method='Run batch';
tmpTask.method_name='RunBatch';
tmpTask.function_name='RunBatch';
tmpTask.description='Tool to created simulated PET images';
tmpTask.require_os=0; %No specific OS required
tmpTask.require_taskindex{1}=[]; %no tasks has to be completed (other tasks=[])
tmpTask.function_wrapper='RunBatch';
tmpTask.prefix='';
tmpTask.documentation='';
tmpTask.who_did='PET center, Debrechen, 2004';
tmpTask.configurator_wrapper='';
tmpTask.configurator.default='';
tmpTask.configurator.user='';
tmpTask.configurator.configurator_name='';
tmpTask.versionlabel='SW version: 30';

pipeline.taskSetup{TaskIndex,MethodIndex}=tmpTask;
